//const fs = require('fs');
const Web3 = require('web3');
const Tran = require('ethereumjs-tx').Transaction
const Common = require('ethereumjs-common').default

const my_private = Common.forCustomChain('mainnet', {
		name: 'My_private',
		networkId: 1,
		chainId: 2020,
	},
	'petersburg',
);

function between(min, max) {
  
  return Math.floor(
    Math.random() * (max - min) + min
  )
}

// Get energy reading from smart meter
// Create an empty modbus client
var energyReadingkWh;
var timestamp;

// Send to Ethereum network

const web3 = new Web3(Web3.currentProvider || 'http://127.0.0.1:8545')

const ABI = [{"constant":false,"inputs":[{"name":"_time","type":"string"},{"name":"_energy","type":"string"}],"name":"createMeter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"time","type":"string"},{"indexed":false,"name":"energy","type":"string"}],"name":"taskCreated","type":"event"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"meter","outputs":[{"name":"id","type":"uint256"},{"name":"time","type":"string"},{"name":"energy","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"taskCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]

const bytecode = "60806040526000805534801561001457600080fd5b506100986040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f302e30000000000000000000000000000000000000000000000000000000000081525061009d640100000000026401000000009004565b6102e0565b600080815460010191905081905550606060405190810160405280600054815260200183815260200182815250600160008054815260200190815260200160002060008201518160000155602082015181600101908051906020019061010492919061023b565b50604082015181600201908051906020019061012192919061023b565b509050507e0a47261ba5282b90d5d77223410381b3b935258b52de9a55f73bee570726626000548383604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610194578082015181840152602081019050610179565b50505050905090810190601f1680156101c15780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156101fa5780820151818401526020810190506101df565b50505050905090810190601f1680156102275780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061027c57805160ff19168380011785556102aa565b828001600101855582156102aa579182015b828111156102a957825182559160200191906001019061028e565b5b5090506102b791906102bb565b5090565b6102dd91905b808211156102d95760008160009055506001016102c1565b5090565b90565b6106d6806102ef6000396000f3fe608060405260043610610051576000357c0100000000000000000000000000000000000000000000000000000000900480639ceb1f3a14610056578063a814b68d146101b5578063b6cb58a5146102dc575b600080fd5b34801561006257600080fd5b506101b36004803603604081101561007957600080fd5b810190808035906020019064010000000081111561009657600080fd5b8201836020820111156100a857600080fd5b803590602001918460018302840111640100000000831117156100ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561012d57600080fd5b82018360208201111561013f57600080fd5b8035906020019184600183028401116401000000008311171561016157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610307565b005b3480156101c157600080fd5b506101ee600480360360208110156101d857600080fd5b81019080803590602001909291905050506104a5565b604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561023857808201518184015260208101905061021d565b50505050905090810190601f1680156102655780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561029e578082015181840152602081019050610283565b50505050905090810190601f1680156102cb5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156102e857600080fd5b506102f16105ff565b6040518082815260200191505060405180910390f35b600080815460010191905081905550606060405190810160405280600054815260200183815260200182815250600160008054815260200190815260200160002060008201518160000155602082015181600101908051906020019061036e929190610605565b50604082015181600201908051906020019061038b929190610605565b509050507e0a47261ba5282b90d5d77223410381b3b935258b52de9a55f73bee570726626000548383604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156103fe5780820151818401526020810190506103e3565b50505050905090810190601f16801561042b5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610464578082015181840152602081019050610449565b50505050905090810190601f1680156104915780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050565b6001602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105575780601f1061052c57610100808354040283529160200191610557565b820191906000526020600020905b81548152906001019060200180831161053a57829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105f55780601f106105ca576101008083540402835291602001916105f5565b820191906000526020600020905b8154815290600101906020018083116105d857829003601f168201915b5050505050905083565b60005481565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061064657805160ff1916838001178555610674565b82800160010185558215610674579182015b82811115610673578251825591602001919060010190610658565b5b5090506106819190610685565b5090565b6106a791905b808211156106a357600081600090555060010161068b565b5090565b9056fea165627a7a723058208d95dcfe0715ccb76924e82e0ebadb20d8ab5e5c54352d41028a90c26ab9ac840029"

const contractaddress = '0x2D0b24BDEf57ee62a176560678CCC11e7ae29F1e'

const myContract = new web3.eth.Contract(ABI, contractaddress)

let account = '0x9c8e8c7847e2268482781ae3ed767d6984d63411';

class sendData {

    constructor(account){
	
    }	

    async Tx (count) {
	let dataTx = myContract.methods.createMeter(between(101, 10000).toString(), between(20000, 
1000000).toString()).encodeABI();
	await web3.eth.getTransactionCount(account, 'pending', (err, txCount) => {
		//if (count != txCount)
		//	count = txCount;
		//else
		//	{	
		//		txCount = txCount + 1;
		//		count = txCount;
		//	}

		const rawTx = {
			to: contractaddress,
			from: account,
			nonce: web3.utils.toHex(txCount),
			data: dataTx,
			gasLimit: web3.utils.toHex(30000),
			gasPrice: web3.utils.toHex(web3.utils.toWei('5','gwei'))
		}
		const tx1 = new Tran(rawTx, {common: my_private});
		const key = 'c2dd6b39ade1ed7abc1a57a6e6e3cb2e2d758f6e7a0f2d711573985f25dced98';			// Private Key
		tx1.sign(Buffer.from(key, 'hex'));
		const serial = tx1.serialize();
		const raw = '0x' + serial.toString('hex');

		web3.eth.sendSignedTransaction(raw, (err, txHash) => {
			if(err)	{
				console.log(err);
			}

			console.log(txHash);
		})
	})

    }
}
let txChecker = new sendData(account);
var count = 0;
setInterval(async () => {
    txChecker.Tx(count);
}, 15);
